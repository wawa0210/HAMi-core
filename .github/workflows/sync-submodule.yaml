on:
  # Run this workflow every time a new commit pushed to upstream/fork repository.
  # Run workflow on fork repository will help contributors find and resolve issues before sending a PR.
  pull_request:
  push:
    branches:
      - main
    tags-ignore:
      - "**"

name: on-commit-to-main

jobs:
  send-pull-requests:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Checkout everything to get access to the tags

      - uses: crazy-max/ghaction-import-gpg@v6
        with:
          gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
          passphrase: ${{ secrets.GPG_PASSPHRASE }}
          git_user_signingkey: true
          git_commit_gpgsign: true

      - name: Send pull-request
        env:
          GITHUB_TOKEN: ${{ secrets.ACCESS_TOKEN }}
          JSON: ${{ toJSON(github) }}
        run: |
          LATEST_TAG=$(git describe --tags --always --abbrev=0)
          REPOSITORY="wawa0210/HAMi"
          FOLDER="bin/$REPOSITORY"
          BRANCH_NAME="sync-submodule-$LATEST_TAG"

          # Clone the remote repository and change working directory to the
          # folder it was cloned to.
          git clone \
            --depth=1 \
            --branch=master \
            https://some-user:${{ secrets.ACCESS_TOKEN }}@github.com/$REPOSITORY \
            $FOLDER

          cd $FOLDER

          # Setup the committers identity.
          git config user.email "xiozhang0210@hotmail.com"
          git config user.name "wawa0210"

          # Create a new feature branch for the changes.
          git checkout -b $BRANCH_NAME

          # Update the submodule to the latest version.

          # git submodule add https://github.com/wawa0210/HAMi-core libvgpu

          git submodule update --init --recursive

          git submodule update --remote --recursive

          # Commit the changes and push the feature branch to origin
          git add .
          git commit -m "sync git submodule to $LATEST_TAG"
          git push origin $BRANCH_NAME

          # Store the PAT in a file that can be accessed by the
          # GitHub CLI.

          # Authorize GitHub CLI for the current repository and
          # create a pull-requests containing the updates.
          # gh auth login --with-token < token.txt
          gh pr create \
            --body "" \
            --title "chore: update scripts to $LATEST_TAG" \
            --head "$BRANCH_NAME" \
            --base "main"
